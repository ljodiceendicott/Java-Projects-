/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ljodi937.roomnavigation;

import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author jodic
 */
public class NavigationWindow extends javax.swing.JFrame {
   
    public ArrayList<Room> layout;
    private ArrayList<GameItem> items;
    public static Room frontPorch,mudRoom,livingRoom,diningRoom,kitchenRoom,libraryRoom,masterBRoom,bathRoom, kidsBRoom;
    private GameItem pencil,bigKnife,noteBook,keyRing,candleNMatch;
    public Room currentroom;
    public InventoryWindow iw;
    /**
     * Creates new form Navigation_Window
     */
    public NavigationWindow() {
        layout = new ArrayList<>();
        items = new ArrayList<>();    
        iw = new InventoryWindow();
     //String name, Room north, Room east, Room south, Room west
   
    kidsBRoom = new Room("Kid's Bedroom");
    bathRoom = new Room("Bathroom");
    masterBRoom = new Room("Master Bedroom");
    libraryRoom = new Room("Library");
    kitchenRoom = new Room("Kitchen");
    diningRoom = new Room("Dining Room");
    livingRoom = new Room("Living room");
    mudRoom = new Room("Mudroom");
    frontPorch = new Room("Front porch");
     /*
    kidsBRoom = new Room("Kid's Bedroom", null,libraryRoom,null, null);
    bathRoom = new Room("Bathroom", null,diningRoom,null,null);
    masterBRoom = new Room("Master Bedroom",null,null,libraryRoom,null);
    libraryRoom = new Room("Library",masterBRoom,kidsBRoom,null,mudRoom);
    kitchenRoom = new Room("Kitchen",null,null,mudRoom,diningRoom);
    diningRoom = new Room("Dining Room",null,bathRoom,livingRoom,kitchenRoom);
    livingRoom = new Room("Living room",diningRoom,mudRoom,null,null);
    mudRoom = new Room("Mudroom",kitchenRoom,livingRoom,frontPorch,livingRoom);
    frontPorch = new Room("Front porch",mudRoom, null, null,null);*/
    //setting the directions for the rooms n,e,s,w
    frontPorch.setDirection(mudRoom, null,null,null);
    mudRoom.setDirection(kitchenRoom,libraryRoom,frontPorch,livingRoom);
    livingRoom.setDirection(diningRoom,mudRoom,null,null);
    diningRoom.setDirection(null,kitchenRoom,livingRoom,bathRoom);
    bathRoom.setDirection(null,diningRoom,null,null);
    kitchenRoom.setDirection(null,null,mudRoom,diningRoom);
    libraryRoom.setDirection(kidsBRoom,masterBRoom, null, mudRoom);
    kidsBRoom.setDirection(null,null,libraryRoom,null);
    masterBRoom.setDirection(null,null,null,libraryRoom);
        
    
    
  
    currentroom=frontPorch;
    
    
    layout.add(frontPorch);
    layout.add(mudRoom);
    layout.add(livingRoom);
    layout.add(diningRoom);
    layout.add(kitchenRoom);
    layout.add(libraryRoom);
    layout.add(masterBRoom);
    layout.add(bathRoom);
    layout.add(kidsBRoom);
    
    //String name, String itusage
    //this creates the instances of the item
    pencil = new GameItem("Pencil", "Could be very useful if you need to write something down");
    bigKnife = new GameItem("Butcher's Knife", "Can cut most things, also a great item for self-defense");
    noteBook = new GameItem("Notebook", "This Book has interesting inscriptions on the cover, with text that reads:\n BLACK-MAGIC \nFOR \nINTERMEIDARIES");
    keyRing = new GameItem("Large set of keys", "At least one of these 200 keys probably unlock something in this house");
    candleNMatch = new GameItem("Candle with matches", "Why not use a candle and matches, it is a classic thing. Do I even know how to light a candle?!!??!!?? Guess we will find out");
    
    //this adds the items into the list of items
    items.add(pencil);
    items.add(bigKnife);
    items.add(noteBook);
    items.add(keyRing);
    items.add(candleNMatch);
    
    //This assigns the items to the given room
    kidsBRoom.item=pencil;
    kidsBRoom.hasItem=true;
    kitchenRoom.item=bigKnife;
    kitchenRoom.hasItem=true;
    libraryRoom.item=noteBook;
    libraryRoom.hasItem=true;
    mudRoom.item=keyRing;
    mudRoom.hasItem=true;
    diningRoom.item=candleNMatch; 
    diningRoom.hasItem=true;

      
    initComponents();
    jtfInfo.setEditable(false);
    this.startGame();
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtfInfo = new javax.swing.JTextPane();
        jbtnNorth = new javax.swing.JButton();
        jbtnSouth = new javax.swing.JButton();
        jbtnEast = new javax.swing.JButton();
        jbtnWest = new javax.swing.JButton();
        jbtnInspectItem = new javax.swing.JButton();
        jbtnShowInv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Room Exploration Game");

        jScrollPane1.setViewportView(jtfInfo);

        jbtnNorth.setText("N");
        jbtnNorth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnNorthActionPerformed(evt);
            }
        });

        jbtnSouth.setText("S");
        jbtnSouth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSouthActionPerformed(evt);
            }
        });

        jbtnEast.setText("E");
        jbtnEast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnEastActionPerformed(evt);
            }
        });

        jbtnWest.setText("W");
        jbtnWest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnWestActionPerformed(evt);
            }
        });

        jbtnInspectItem.setText("Inspect Item");
        jbtnInspectItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnInspectItemActionPerformed(evt);
            }
        });

        jbtnShowInv.setText("Show Inventory");
        jbtnShowInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnShowInvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jbtnSouth))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jbtnWest)
                                .addGap(34, 34, 34)
                                .addComponent(jbtnEast)
                                .addGap(27, 27, 27)
                                .addComponent(jbtnInspectItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnShowInv)))
                        .addGap(0, 3, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jbtnNorth)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jbtnNorth)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnEast, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(jbtnWest)
                    .addComponent(jbtnInspectItem)
                    .addComponent(jbtnShowInv))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbtnSouth)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnEastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnEastActionPerformed
        currentroom=currentroom.eastPoint;
        this.fixGameState();
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnEastActionPerformed

    private void jbtnShowInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnShowInvActionPerformed
       iw.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnShowInvActionPerformed

    private void jbtnNorthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnNorthActionPerformed
        // TODO add your handling code here:
        currentroom= currentroom.northPoint;
        this.fixGameState();
    }//GEN-LAST:event_jbtnNorthActionPerformed

    private void jbtnSouthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSouthActionPerformed
        currentroom=currentroom.southPoint;
        this.fixGameState();
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnSouthActionPerformed

    private void jbtnWestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnWestActionPerformed
        currentroom=currentroom.westPoint;
        this.fixGameState();
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnWestActionPerformed

    private void jbtnInspectItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnInspectItemActionPerformed
        this.itemDialog();
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnInspectItemActionPerformed
    private void startGame(){
        jtfInfo.setText(currentroom.roomInfo());
        jbtnEast.setEnabled(false);
        jbtnWest.setEnabled(false);
        jbtnSouth.setEnabled(false);
        jbtnNorth.setEnabled(true);
       jbtnInspectItem.setEnabled(false);
    }
    private void fixGameState(){
        jbtnNorth.setEnabled(currentroom.canNorth());
        jbtnEast.setEnabled(currentroom.canEast());
        jbtnSouth.setEnabled(currentroom.canSouth());
        jbtnWest.setEnabled(currentroom.canWest());
        
        jtfInfo.setText(currentroom.roomInfo());
        this.itemDialog();
       
        }
    public void itemDialog(){
        if(currentroom.hasItem){
            String[] option= {"Yes,pick it up", "No,Don't Pick up "};
            int op =JOptionPane.showOptionDialog(null,"would you Like to pick this "+ currentroom.item.getName() +" up?","Item Found!",2, HEIGHT, null, option, EXIT_ON_CLOSE);
            if(op==0){
                currentroom.hasItem=false;
                iw.dlm.addElement(currentroom.item);
                jtfInfo.setText(currentroom.roomInfo());
                //addItem to inventory
            }
            else if(op==1){
               jbtnInspectItem.setEnabled(true);
            }
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NavigationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NavigationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NavigationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NavigationWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NavigationWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnEast;
    private javax.swing.JButton jbtnInspectItem;
    private javax.swing.JButton jbtnNorth;
    private javax.swing.JButton jbtnShowInv;
    private javax.swing.JButton jbtnSouth;
    private javax.swing.JButton jbtnWest;
    private javax.swing.JTextPane jtfInfo;
    // End of variables declaration//GEN-END:variables
}
